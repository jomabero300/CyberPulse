// <auto-generated />
using System;
using CyberPulse.Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CyberPulse.Backend.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251021160604_InventoryInitial")]
    partial class InventoryInitial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Admi")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CyberPulse.Shared.Entities.Chipp.Chip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AlertDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Apprentices")
                        .HasColumnType("int");

                    b.Property<string>("ChipNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("ChipProgramId")
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Friday")
                        .IsRequired()
                        .HasMaxLength(23)
                        .HasColumnType("varchar(23)");

                    b.Property<bool>("Holiday")
                        .HasColumnType("bit");

                    b.Property<string>("InstructorId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Justification")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Monday")
                        .IsRequired()
                        .HasMaxLength(23)
                        .HasColumnType("varchar(23)");

                    b.Property<int>("NeighborhoodId")
                        .HasColumnType("int");

                    b.Property<string>("Saturday")
                        .IsRequired()
                        .HasMaxLength(23)
                        .HasColumnType("varchar(23)");

                    b.Property<bool>("SentStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StatuId")
                        .HasColumnType("int");

                    b.Property<string>("Sunday")
                        .IsRequired()
                        .HasMaxLength(23)
                        .HasColumnType("varchar(23)");

                    b.Property<int>("TrainingProgramId")
                        .HasColumnType("int");

                    b.Property<string>("Tuesday")
                        .IsRequired()
                        .HasMaxLength(23)
                        .HasColumnType("varchar(23)");

                    b.Property<string>("Tursday")
                        .IsRequired()
                        .HasMaxLength(23)
                        .HasColumnType("varchar(23)");

                    b.Property<int>("TypeOfTrainingId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Wednesday")
                        .IsRequired()
                        .HasMaxLength(23)
                        .HasColumnType("varchar(23)");

                    b.Property<bool>("idEsta")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ChipProgramId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("NeighborhoodId");

                    b.HasIndex("StatuId");

                    b.HasIndex("TrainingProgramId");

                    b.HasIndex("TypeOfTrainingId");

                    b.HasIndex("UserId");

                    b.ToTable("Chips", "Chip");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Chipp.ChipPoblation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChipId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TypePoblationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChipId");

                    b.HasIndex("TypePoblationId", "ChipId")
                        .IsUnique();

                    b.ToTable("ChipPoblations", "Chip");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Chipp.ChipProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("PriorityBetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("SupportFic")
                        .HasColumnType("bit");

                    b.Property<int>("TriningLevelId")
                        .HasColumnType("int");

                    b.Property<string>("TypeOfTraining")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<bool>("WingMeasure")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PriorityBetId");

                    b.HasIndex("TriningLevelId");

                    b.HasIndex("Code", "Version")
                        .IsUnique();

                    b.ToTable("ChipPrograms", "Chip");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Chipp.PriorityBet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PriorityBets", "Chip");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Chipp.TrainingProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TrainingPrograms", "Chip");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Chipp.TriningLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TriningLevels", "Chip");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Chipp.TypeOfPoblation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TypeOfPoblations", "Chip");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Chipp.TypeOfTraining", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TypeOfTrainings", "Chip");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Gene.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateId", "Name")
                        .IsUnique();

                    b.ToTable("Cities", "Gene");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Gene.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries", "Gene");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Gene.Iva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<int>("StatuId")
                        .HasColumnType("int");

                    b.Property<decimal>("Worth")
                        .HasColumnType("decimal(3,2)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("StatuId");

                    b.ToTable("Ivas", "Gene");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Gene.Neighborhood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CityId", "Name")
                        .IsUnique();

                    b.ToTable("Neighborhoods", "Gene");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Gene.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId", "Name")
                        .IsUnique();

                    b.ToTable("States", "Gene");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Gene.Statu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.Property<int>("Nivel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name", "Nivel")
                        .IsUnique();

                    b.ToTable("Status", "Gene");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Gene.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Photo")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "Admi");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.Budget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BudgetTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Rubro")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<int>("StatuId")
                        .HasColumnType("int");

                    b.Property<int>("ValidityId")
                        .HasColumnType("int");

                    b.Property<decimal>("Worth")
                        .HasColumnType("decimal(14,2)");

                    b.HasKey("Id");

                    b.HasIndex("BudgetTypeId");

                    b.HasIndex("StatuId");

                    b.HasIndex("ValidityId");

                    b.ToTable("Budgets", "Inve");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.BudgetCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BudgetLotId")
                        .HasColumnType("int");

                    b.Property<int>("CourseProgramLotId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InstructorId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StatuId")
                        .HasColumnType("int");

                    b.Property<int>("ValidityId")
                        .HasColumnType("int");

                    b.Property<decimal>("Worth")
                        .HasColumnType("decimal(14,2)");

                    b.HasKey("Id");

                    b.HasIndex("BudgetLotId");

                    b.HasIndex("CourseProgramLotId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("StatuId");

                    b.HasIndex("ValidityId", "CourseProgramLotId", "StartDate")
                        .IsUnique();

                    b.ToTable("BudgetCourses", "Inve", t =>
                        {
                            t.HasCheckConstraint("CK_EndDateGreaterthanInitial", "[EndDate] > [StartDate]");
                        });
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.BudgetLot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BudgetProgramId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramLotId")
                        .HasColumnType("int");

                    b.Property<int>("StatuId")
                        .HasColumnType("int");

                    b.Property<int>("ValidityId")
                        .HasColumnType("int");

                    b.Property<decimal>("Worth")
                        .HasColumnType("decimal(14,2)");

                    b.HasKey("Id");

                    b.HasIndex("BudgetProgramId");

                    b.HasIndex("ProgramLotId");

                    b.HasIndex("StatuId");

                    b.HasIndex("ValidityId");

                    b.ToTable("BudgetLots", "Inve");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.BudgetProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BudgetId")
                        .HasColumnType("int");

                    b.Property<int>("BudgetTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<int>("StatuId")
                        .HasColumnType("int");

                    b.Property<int>("ValidityId")
                        .HasColumnType("int");

                    b.Property<decimal>("Worth")
                        .HasColumnType("decimal(14,2)");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("BudgetTypeId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("StatuId");

                    b.HasIndex("ValidityId");

                    b.ToTable("BudgetPrograms", "Inve");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.BudgetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("BudgetTypes", "Inve");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.Classe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int>("FamilyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("StatuId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("StatuId");

                    b.HasIndex("FamilyId", "Code", "Name")
                        .IsUnique();

                    b.ToTable("Classes", "Inve");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("StatuId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("StatuId");

                    b.ToTable("Courses", "Inve");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.CourseProgramLot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramLotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramLotId");

                    b.HasIndex("CourseId", "ProgramLotId")
                        .IsUnique();

                    b.ToTable("CourseProgramLots", "Inve");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.Family", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("SegmentId")
                        .HasColumnType("int");

                    b.Property<int>("StatuId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("StatuId");

                    b.HasIndex("SegmentId", "Code", "Name")
                        .IsUnique();

                    b.ToTable("Families", "Inve");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.InvProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<int>("StatuId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("StatuId");

                    b.ToTable("Programs", "Inve");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.Lot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<int>("StatuId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("StatuId");

                    b.ToTable("Lots", "Inve");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClasseId")
                        .HasColumnType("int");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("LotId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("StatuId")
                        .HasColumnType("int");

                    b.Property<int>("UnitMeasurementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("LotId");

                    b.HasIndex("StatuId");

                    b.HasIndex("UnitMeasurementId");

                    b.HasIndex("ClasseId", "Name")
                        .IsUnique();

                    b.ToTable("Products", "Inve");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.ProductCurrentValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IvaId")
                        .HasColumnType("int");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(3,1)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ValidityId")
                        .HasColumnType("int");

                    b.Property<decimal>("Worth")
                        .HasColumnType("decimal(14,2)");

                    b.HasKey("Id");

                    b.HasIndex("IvaId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ValidityId", "ProductId")
                        .IsUnique();

                    b.ToTable("ProductCurrentValues", "Inve");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.ProductQuotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcceptedQuantity")
                        .HasColumnType("int");

                    b.Property<int>("BudgetCourseId")
                        .HasColumnType("int");

                    b.Property<int>("ProductCurrentValueId")
                        .HasColumnType("int");

                    b.Property<decimal>("QuotedValue")
                        .HasColumnType("decimal(14,2)");

                    b.Property<int>("RequestedQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BudgetCourseId");

                    b.HasIndex("ProductCurrentValueId");

                    b.ToTable("ProductQuotations", "Inve");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.ProgramLot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LotId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LotId");

                    b.HasIndex("ProgramId", "LotId")
                        .IsUnique();

                    b.ToTable("ProgramLots", "Inve");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.Segment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("StatuId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("StatuId");

                    b.ToTable("Segments", "Inve");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.UnitMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BaseValue")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("StatuId")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("StatuId");

                    b.ToTable("UnitMeasurements", "Inve");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.Validity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("StatuId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatuId");

                    b.HasIndex("Value")
                        .IsUnique();

                    b.ToTable("Validities", "Inve");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "Admi");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "Admi");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "Admi");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "Admi");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "Admi");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "Admi");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Chipp.Chip", b =>
                {
                    b.HasOne("CyberPulse.Shared.Entities.Chipp.ChipProgram", "ChipProgram")
                        .WithMany("Chips")
                        .HasForeignKey("ChipProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Gene.User", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Gene.Neighborhood", "Neighborhood")
                        .WithMany()
                        .HasForeignKey("NeighborhoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Gene.Statu", "Statu")
                        .WithMany("Chips")
                        .HasForeignKey("StatuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Chipp.TrainingProgram", "TrainingProgram")
                        .WithMany("Chip")
                        .HasForeignKey("TrainingProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Chipp.TypeOfTraining", "TypeOfTraining")
                        .WithMany("Chip")
                        .HasForeignKey("TypeOfTrainingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Gene.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChipProgram");

                    b.Navigation("Instructor");

                    b.Navigation("Neighborhood");

                    b.Navigation("Statu");

                    b.Navigation("TrainingProgram");

                    b.Navigation("TypeOfTraining");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Chipp.ChipPoblation", b =>
                {
                    b.HasOne("CyberPulse.Shared.Entities.Chipp.Chip", "Chip")
                        .WithMany("ChipPoblations")
                        .HasForeignKey("ChipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Chipp.TypeOfPoblation", "TypePoblation")
                        .WithMany("ChipPoblations")
                        .HasForeignKey("TypePoblationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chip");

                    b.Navigation("TypePoblation");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Chipp.ChipProgram", b =>
                {
                    b.HasOne("CyberPulse.Shared.Entities.Chipp.PriorityBet", "PriorityBet")
                        .WithMany("ChipProgram")
                        .HasForeignKey("PriorityBetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Chipp.TriningLevel", "TriningLevel")
                        .WithMany("ChipProgram")
                        .HasForeignKey("TriningLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PriorityBet");

                    b.Navigation("TriningLevel");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Gene.City", b =>
                {
                    b.HasOne("CyberPulse.Shared.Entities.Gene.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Gene.Iva", b =>
                {
                    b.HasOne("CyberPulse.Shared.Entities.Gene.Statu", "Statu")
                        .WithMany()
                        .HasForeignKey("StatuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Statu");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Gene.Neighborhood", b =>
                {
                    b.HasOne("CyberPulse.Shared.Entities.Gene.City", "City")
                        .WithMany("Neighborhoods")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Gene.State", b =>
                {
                    b.HasOne("CyberPulse.Shared.Entities.Gene.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Gene.User", b =>
                {
                    b.HasOne("CyberPulse.Shared.Entities.Gene.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.Budget", b =>
                {
                    b.HasOne("CyberPulse.Shared.Entities.Inve.BudgetType", "BudgetType")
                        .WithMany()
                        .HasForeignKey("BudgetTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Gene.Statu", "Statu")
                        .WithMany()
                        .HasForeignKey("StatuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Inve.Validity", "Validity")
                        .WithMany()
                        .HasForeignKey("ValidityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BudgetType");

                    b.Navigation("Statu");

                    b.Navigation("Validity");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.BudgetCourse", b =>
                {
                    b.HasOne("CyberPulse.Shared.Entities.Inve.BudgetLot", "BudgetLot")
                        .WithMany()
                        .HasForeignKey("BudgetLotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Inve.CourseProgramLot", "CourseProgramLot")
                        .WithMany()
                        .HasForeignKey("CourseProgramLotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Gene.User", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Gene.Statu", "Statu")
                        .WithMany()
                        .HasForeignKey("StatuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Inve.Validity", "Validity")
                        .WithMany()
                        .HasForeignKey("ValidityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BudgetLot");

                    b.Navigation("CourseProgramLot");

                    b.Navigation("Instructor");

                    b.Navigation("Statu");

                    b.Navigation("Validity");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.BudgetLot", b =>
                {
                    b.HasOne("CyberPulse.Shared.Entities.Inve.BudgetProgram", "BudgetProgram")
                        .WithMany()
                        .HasForeignKey("BudgetProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Inve.ProgramLot", "ProgramLot")
                        .WithMany()
                        .HasForeignKey("ProgramLotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Gene.Statu", "Statu")
                        .WithMany()
                        .HasForeignKey("StatuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Inve.Validity", "Validity")
                        .WithMany()
                        .HasForeignKey("ValidityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BudgetProgram");

                    b.Navigation("ProgramLot");

                    b.Navigation("Statu");

                    b.Navigation("Validity");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.BudgetProgram", b =>
                {
                    b.HasOne("CyberPulse.Shared.Entities.Inve.Budget", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Inve.BudgetType", "BudgetType")
                        .WithMany()
                        .HasForeignKey("BudgetTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Inve.InvProgram", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Gene.Statu", "Statu")
                        .WithMany()
                        .HasForeignKey("StatuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Inve.Validity", "Validity")
                        .WithMany()
                        .HasForeignKey("ValidityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Budget");

                    b.Navigation("BudgetType");

                    b.Navigation("Program");

                    b.Navigation("Statu");

                    b.Navigation("Validity");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.Classe", b =>
                {
                    b.HasOne("CyberPulse.Shared.Entities.Inve.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Gene.Statu", "Statu")
                        .WithMany()
                        .HasForeignKey("StatuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Family");

                    b.Navigation("Statu");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.Course", b =>
                {
                    b.HasOne("CyberPulse.Shared.Entities.Gene.Statu", "Statu")
                        .WithMany()
                        .HasForeignKey("StatuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Statu");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.CourseProgramLot", b =>
                {
                    b.HasOne("CyberPulse.Shared.Entities.Inve.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Inve.ProgramLot", "ProgramLot")
                        .WithMany()
                        .HasForeignKey("ProgramLotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("ProgramLot");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.Family", b =>
                {
                    b.HasOne("CyberPulse.Shared.Entities.Inve.Segment", "Segment")
                        .WithMany()
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Gene.Statu", "Statu")
                        .WithMany()
                        .HasForeignKey("StatuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Segment");

                    b.Navigation("Statu");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.InvProgram", b =>
                {
                    b.HasOne("CyberPulse.Shared.Entities.Gene.Statu", "Statu")
                        .WithMany()
                        .HasForeignKey("StatuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Statu");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.Lot", b =>
                {
                    b.HasOne("CyberPulse.Shared.Entities.Gene.Statu", "Statu")
                        .WithMany()
                        .HasForeignKey("StatuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Statu");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.Product", b =>
                {
                    b.HasOne("CyberPulse.Shared.Entities.Inve.Classe", "Classe")
                        .WithMany()
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Inve.Lot", "Lot")
                        .WithMany()
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Gene.Statu", "Statu")
                        .WithMany()
                        .HasForeignKey("StatuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Inve.UnitMeasurement", "UnitMeasurement")
                        .WithMany()
                        .HasForeignKey("UnitMeasurementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Classe");

                    b.Navigation("Lot");

                    b.Navigation("Statu");

                    b.Navigation("UnitMeasurement");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.ProductCurrentValue", b =>
                {
                    b.HasOne("CyberPulse.Shared.Entities.Gene.Iva", "Iva")
                        .WithMany()
                        .HasForeignKey("IvaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Inve.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Inve.Validity", "Validity")
                        .WithMany()
                        .HasForeignKey("ValidityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Iva");

                    b.Navigation("Product");

                    b.Navigation("Validity");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.ProductQuotation", b =>
                {
                    b.HasOne("CyberPulse.Shared.Entities.Inve.BudgetCourse", "BudgetCourse")
                        .WithMany()
                        .HasForeignKey("BudgetCourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Inve.ProductCurrentValue", "ProductCurrentValue")
                        .WithMany()
                        .HasForeignKey("ProductCurrentValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BudgetCourse");

                    b.Navigation("ProductCurrentValue");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.ProgramLot", b =>
                {
                    b.HasOne("CyberPulse.Shared.Entities.Inve.Lot", "Lot")
                        .WithMany()
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Inve.InvProgram", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lot");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.Segment", b =>
                {
                    b.HasOne("CyberPulse.Shared.Entities.Gene.Statu", "Statu")
                        .WithMany()
                        .HasForeignKey("StatuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Statu");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.UnitMeasurement", b =>
                {
                    b.HasOne("CyberPulse.Shared.Entities.Gene.Statu", "Statu")
                        .WithMany("UnitMeasurements")
                        .HasForeignKey("StatuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Statu");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Inve.Validity", b =>
                {
                    b.HasOne("CyberPulse.Shared.Entities.Gene.Statu", "Statu")
                        .WithMany()
                        .HasForeignKey("StatuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Statu");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CyberPulse.Shared.Entities.Gene.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CyberPulse.Shared.Entities.Gene.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CyberPulse.Shared.Entities.Gene.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CyberPulse.Shared.Entities.Gene.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Chipp.Chip", b =>
                {
                    b.Navigation("ChipPoblations");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Chipp.ChipProgram", b =>
                {
                    b.Navigation("Chips");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Chipp.PriorityBet", b =>
                {
                    b.Navigation("ChipProgram");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Chipp.TrainingProgram", b =>
                {
                    b.Navigation("Chip");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Chipp.TriningLevel", b =>
                {
                    b.Navigation("ChipProgram");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Chipp.TypeOfPoblation", b =>
                {
                    b.Navigation("ChipPoblations");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Chipp.TypeOfTraining", b =>
                {
                    b.Navigation("Chip");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Gene.City", b =>
                {
                    b.Navigation("Neighborhoods");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Gene.Country", b =>
                {
                    b.Navigation("States");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Gene.State", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("CyberPulse.Shared.Entities.Gene.Statu", b =>
                {
                    b.Navigation("Chips");

                    b.Navigation("UnitMeasurements");
                });
#pragma warning restore 612, 618
        }
    }
}
